   public function getCustomerAddress()
        {
        	
        	try {
        	$t=[];
        	$tt=Request::header("Authorization");
        	Log::info(" token  ".print_r($tt,true));
        	$cart=$this->utilities->attachCart($t,true);
        	$dataCart=$this->utilities->getCartFinalSummary($cart['products'], $cart['_id']);
            $finalData=['status'=>200,"response"=>[]];
            
            if(!empty($dataCart)&&!empty($dataCart['status']) && $dataCart['status'] != 5)
        			$finalData=['status'=>200,"response"=>$dataCart['data']];
        		else return $dataCart;
        			$this->utilities->fetchCustomerAddresses($finalData['response']);
        			$cities=$this->utilities->getProductCities();
        			if(count($cities))$finalData['response']['cities']=$cities;
        		return $finalData;
        	} catch (Exception $e) {
        		return  ['status'=>0,"message"=>$this->utilities->baseFailureStatusMessage($e)];
        	}
        }
        
        
        
        public function setCustomerAddress()
        {
        	try {
        		$resp=["status"=>200,"messge"=>"Success"];
        		$data  =  Input::json()->all();
        		$rules = ['customer_address'=>'required'];
        		$validator = Validator::make($data,$rules);
        		
        		if ($validator->fails()) {
        			return ['status'=> 0,'message' => error_message($validator->errors())];
        		}
        		$added=$this->utilities->addCustomerAddress(null,$data['customer_address']);
        		return (!empty($added))?$resp:['status'=>0,"message"=>"Couldn't add address"];
        		
        	} catch (Exception $e) {
        		return  ['status'=>0,"message"=>$this->utilities->baseFailureStatusMessage($e)];
        	}
        }

        public function getCouponPackages(){
            return GiftCoupon::active()->get();
        }